<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Google.com" />
<Content type="html"><![CDATA[


<!DOCTYPE html>
<html lang="en-us">
<head>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/netclassroom/tamxam@main/style.css"/>
<style>
    canvas:focus { outline: none; }
    html, body {
        padding: 0; margin: 0; overflow: hidden;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        -webkit-tap-highlight-color: rgba(0,0,0,0);
        height: 100%;
    }
</style>
</head>
<body class="dark">
<div id="unity-container" class="unity-desktop">
    <canvas id="unity-canvas" tabindex="-1"></canvas>
</div>
<div id="loading-cover" style="display:none;">
    <div id="unity-loading-bar">
        <div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/netclassroom/tamxam@main/Images/logo.png"/></div>
        <div id="unity-progress-bar-empty" style="display: none;">
            <div id="unity-progress-bar-full"></div>
        </div>
        <div class="spinner"></div>
    </div>
</div>

<script>
    const hideFullScreenButton = "";
    const buildUrl = "https://cdn.jsdelivr.net/gh/netclassroom/tamxam@main/Build";
    const loaderUrl = buildUrl + "/c4ce55f6fd990c1236bc84106eb955bf.loader.js";
    const config = {
        dataUrl: buildUrl + "/861655c9ad52779fb5685135fe6708b6.data.br",
        frameworkUrl: buildUrl + "/2a7895264c69b25c7455095875a2efc1.framework.js",
        codeUrl: buildUrl + "/21cf1a05cb9d195cca93eaf83a434f21.wasm.br",
        streamingAssetsUrl: "https://cdn.jsdelivr.net/gh/netclassroom/tamxam@main/StreamingAssets",
        companyName: "LightFound Games",
        productName: "Obby with Friends Hide And Seek Online",
        productVersion: "1.2.5"
    };

    let wasmLoaded = false;

    async function loadSplitWasmBr() {
        if (wasmLoaded) return;
        const baseName = "21cf1a05cb9d195cca93eaf83a434f21.wasm.br";
        const parts = [];

        for (let i = 1; i <= 4; i++) {
            const url = `${buildUrl}/${baseName}.part${i}`;
            let response;
            try { response = await fetch(url, { method: 'HEAD' }); }
            catch (err) { console.warn(`Parça ${i} kontrol hatası:`, err); continue; }

            if (!response.ok) {
                if (response.status === 404) continue;
                else { console.warn(`Parça ${i} hatası: ${response.status}`); continue; }
            }

            const fullResponse = await fetch(url);
            if (!fullResponse.ok) continue;
            const arrayBuffer = await fullResponse.arrayBuffer();
            parts.push(arrayBuffer);
            console.log(`Parça ${i}/4 yüklendi: ${((arrayBuffer.byteLength)/1024/1024).toFixed(2)} MB`);
        }

        if (parts.length === 0) {
            console.error("Hiç parça yüklenemedi! Orijinal WASM kullanılıyor.");
            return;
        }

        const totalSize = parts.reduce((sum, p) => sum + p.byteLength, 0);
        const combined = new Uint8Array(totalSize);
        let offset = 0;
        for (const part of parts) {
            combined.set(new Uint8Array(part), offset);
            offset += part.byteLength;
        }

        const blob = new Blob([combined], { type: 'application/wasm' });
        config.codeUrl = URL.createObjectURL(blob);
        wasmLoaded = true;
        console.log(`WASM birleştirildi: ${((totalSize)/1024/1024).toFixed(2)} MB`);
    }

    // --- UNITY LOADER ---
    const script = document.createElement("script");
    script.src = loaderUrl;
    script.onload = async () => {
        try {
            await loadSplitWasmBr();

            window.StartUnityInstance = function () {
                createUnityInstance(canvas, config, (progress) => {
                    spinner.style.display = "none";
                    progressBarEmpty.style.display = "block";
                    const adjustedProgress = Math.max(progress, 0.05);
                    progressBarFull.style.width = `${100 * adjustedProgress}%`;
                }).then(async (unityInstance) => {
                    ygGameInstance = unityInstance;
                    loadingCover.style.background = "";
                    loadingCover.style.display = "none";
                    console.log("Unity başarıyla yüklendi!");

                    // ZORLA SDK BAŞLAT + COİN SATIŞI DEVRE DIŞI
                    setTimeout(async () => {
                        if (ygGameInstance) {
                            await RequestingEnvironmentData();
                            await InitPlayer();
                            await LoadCloud();
                            await InitReview();
                            await InitPayments(); // NO_DATA döner
                            await GetAllGames();
                            await GetFlags();

                            // SDK TAMAMLANDI → OYUN DEVAM EDER
                            ygGameInstance.SendMessage('YG2Instance', 'InitSDKComplete');
                            console.log("%cSDK ZORLA TAMAMLANDI → OYUN AÇILIYOR", "color: lime; font-weight: bold; font-size: 16px;");

                            // COİN SATIN ALIMI DEVRE DIŞI → DONMA YOK
                            ygGameInstance.SendMessage('YG2Instance', 'OnPurchaseFailed', 'all');
                            console.log("%cCOİN SATIN ALIMI DEVRE DIŞI → BUTON TIKLANSA DA DONMAZ", "color: orange; font-weight: bold;");
                        }
                    }, 500);

                    InitGame();
                }).catch((message) => {
                    console.error("Unity başlatma hatası:", message);
                    alert("Oyun başlatılamadı: " + message);
                });
            };

            // ZORLA BAŞLAT
            setTimeout(() => {
                if (typeof InstallBlurFocusBlocker === 'function') InstallBlurFocusBlocker();
                window.StartUnityInstance();
            }, 100);

        } catch (err) {
            console.error("Wasm birleştirme hatası:", err);
            alert("Oyun dosyaları yüklenemedi: " + err.message);
        }
    };
    script.onerror = () => {
        console.error("loader.js yüklenemedi:", loaderUrl);
        alert("Gerekli dosya eksik: loader.js");
    };
    document.head.appendChild(script);

    // DOM Elements
    const container = document.querySelector("#unity-container");
    const canvas = document.querySelector("#unity-canvas");
    const loadingCover = document.querySelector("#loading-cover");
    const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
    const progressBarFull = document.querySelector("#unity-progress-bar-full");
    const spinner = document.querySelector('.spinner');

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        container.className = "unity-mobile";
    }

    loadingCover.style.display = "";

    let StartUnityInstance;
    let ygGameInstance = null;
    let ysdk = null;
    let initYSDK = false;
    let initGame = false;
    let isVisibility = true;
    let isPausedGame = false;
    const NO_DATA = 'no data';

    // --- SDK'YI TAMAMEN ATLAT ---
    window.YaGames = { init: () => Promise.resolve({}) };
    window.ysdk = null;
    window.player = null;
    window.payments = null;

    let environmentData = NO_DATA;
    let playerData = NO_DATA;
    let cloudSaves = NO_DATA;
    let paymentsData = NO_DATA;
    let allGamesData = NO_DATA;
    let flasgsData = NO_DATA;
    let reviewData = 'false';

    function LogStyledMessage(message, style) {
        console.log('%c' + message, style || 'color: #FFDF73; background-color: #454545');
    }

    function YG2Instance(method, arg1, arg2) {
        if (!ygGameInstance) return;
        try {
            if (arguments.length === 1) ygGameInstance.SendMessage('YG2Instance', method);
            else if (arguments.length === 2) ygGameInstance.SendMessage('YG2Instance', method, arg1);
            else if (arguments.length === 3) ygGameInstance.SendMessage('YG2Instance', method, arg1, arg2);
        } catch (e) { console.warn("YG2Instance atlandı:", method); }
    }

    function InitGame() {
        initGame = true;
        console.log("Oyun başlatıldı (SDK'sız + Coin Satışı Kapalı)");
    }

    function IsLocalHost() { return true; }

    function InstallBlurFocusBlocker() {
        if (!('onblur' in document) || window.blurFocusHandlersInstalled) return;
        window.addEventListener('blur', function () {
            let blockerButton = document.createElement('button');
            blockerButton.style.position = 'fixed';
            blockerButton.style.top = '0'; blockerButton.style.left = '0';
            blockerButton.style.width = '100%'; blockerButton.style.height = '100%';
            blockerButton.style.zIndex = '9999';
            blockerButton.style.backgroundColor = 'rgba(0, 0, 0, 0)';
            blockerButton.style.border = 'none'; blockerButton.style.cursor = 'default';
            document.body.appendChild(blockerButton);
            function removeBlocker() {
                if (blockerButton && blockerButton.parentNode) {
                    blockerButton.parentNode.removeChild(blockerButton);
                }
                window.removeEventListener('focus', removeBlocker);
            }
            window.addEventListener('focus', removeBlocker);
        });
        window.blurFocusHandlersInstalled = true;
    }

    function FocusGame() { canvas.focus(); }

    // --- TÜM SDK FONKSİYONLARI (COİN SATIŞI KAPALI) ---
    function RequestingEnvironmentData() {
        return new Promise((resolve) => {
            const fake = JSON.stringify({ language:"en", domain:"com", deviceType:"desktop", isMobile:false, isDesktop:true, isTablet:false, isTV:false, appID:"000000", browserLang:"en-US", payload:"", platform:navigator.platform, browser:"Chrome" });
            environmentData = fake;
            YG2Instance('SetEnvirData', fake);
            LogStyledMessage("Init Envir inGame");
            resolve(fake);
        });
    }

    function InitPlayer() {
        return new Promise((resolve) => {
            const fake = JSON.stringify({ playerAuth:"resolved", playerName:"Player", playerId:"local_123", playerPhoto:"", payingStatus:"non_paying" });
            playerData = fake;
            YG2Instance('SetAuth', fake);
            resolve(fake);
        });
    }

    function LoadCloud() {
        return new Promise((resolve) => {
            cloudSaves = NO_DATA;
            YG2Instance('SetLoadSaves', NO_DATA);
            resolve(NO_DATA);
        });
    }

    function InitReview() { return Promise.resolve('false'); }
    function GetAllGames() { return Promise.resolve(NO_DATA); }
    function GetFlags() { return Promise.resolve(NO_DATA); }

    function InitPayments() {
        return new Promise((resolve) => {
            paymentsData = NO_DATA;
            YG2Instance('PaymentsEntries', NO_DATA);
            resolve(NO_DATA);
        });
    }

    // COİN SATIŞI TAMAMEN KAPALI
    function BuyPayments(id) {
        console.log("Coin satın alımı devre dışı!");
        YG2Instance('OnPurchaseFailed', id);
    }

    function ConsumePurchase() { /* no-op */ }
    function ConsumePurchases() { /* no-op */ }

    // Diğer fonksiyonlar
    const noop = () => {};
    window.SaveCloud = noop;
    window.RewardedAdvShow = noop;
    window.Review = noop;
    window.SetLeaderboard = noop;
    window.GetLeaderboard = noop;
    window.InterAdvShow = noop;
    window.OpenAuthDialog = noop;

    // Visibility
    document.addEventListener('contextmenu', e => e.preventDefault());
    document.addEventListener('visibilitychange', () => {});
    window.addEventListener('blur', () => {});
    window.addEventListener('focus', () => {});
    window.addEventListener('pointerdown', () => { FocusGame(); });

    console.log("%cYANDEX SDK KALDIRILDI | COİN SATIŞI KAPALI | OYUN DONMAZ", "color: #00ff00; font-size: 18px; font-weight: bold; background: #000; padding: 10px;");
</script>

<!-- GOOGLE -->
<style>
  /* Container: Top center, fixed, with overflow hidden */
  #ad-container {
    position: fixed;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: min(728px, calc(100% - 20px)); /* 728px, 10px margin on mobile */
    height: 90px;
    background: rgba(0, 0, 0, 0.90);
    display: none;
    z-index: 99999;
    border-radius: 0; /* Sharp corners */
    overflow: hidden;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.45);
    box-sizing: border-box;
    transition: transform 0.5s ease-in-out; /* Smooth slide-in/out animation */
  }

  /* Slide-out animation */
  #ad-container.hidden {
    transform: translate(-50%, -100%); /* Slide up out of view */
  }

  #ad-iframe {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 745px; /* Updated width */
    height: 90px; /* Updated height */
    border: 0;
    display: block;
    overflow: hidden;
    pointer-events: auto;
    box-sizing: content-box;
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  #ad-iframe::-webkit-scrollbar {
    display: none;
    width: 0;
    height: 0;
  }

  /* Close button with arrow */
  #close-ad {
    position: absolute;
    top: 6px;
    right: 8px;
    background: #ff4d4d;
    color: #fff;
    border: none;
    padding: 5px 9px;
    font-size: 13px;
    border-radius: 4px;
    cursor: not-allowed;
    opacity: 0.72;
    z-index: 100000;
    display: flex;
    align-items: center;
  }
  #close-ad.enabled {
    cursor: pointer;
    opacity: 1;
  }
  #close-ad::before {
    content: '↑'; /* Up arrow */
    margin-right: 4px;
  }

  /* Right mask for scrollbar */
  #ad-right-mask {
    position: absolute;
    top: 0;
    right: 0;
    width: 12px;
    height: 100%;
    pointer-events: none;
    background: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.9));
    z-index: 99999;
  }

  /* Mobile adjustments */
  @media (max-width: 440px) {
    #ad-container {
      width: calc(100% - 12px);
      left: 50%;
      transform: translateX(-50%);
      border-radius: 0; /* Sharp corners on mobile */
    }
    #ad-iframe {
      width: 708px;
    }
  }
</style>

<div id="ad-container" aria-hidden="true" role="dialog" aria-label="Advertisement">
  <iframe
    id="ad-iframe"
    src="https://script.google.com/macros/s/AKfycbwO0_-Mbrs-AoE1MqbBxyaIzK385M7xGx4jDkq-FDsbR9wNcqft1m3554Np5XINfbRViw/exec"
    width="768px"
    height="95px"
    scrolling="no"
    frameborder="0"

    sandbox="allow-scripts allow-popups allow-same-origin"
  ></iframe>
  <button id="close-ad" disabled>Close (12)</button>
  <div id="ad-right-mask"></div>
</div>

<script>
  (function () {
    const showDelay = 9000; // 2 seconds delay before first show
    const countdownStart = 12; // 12 seconds countdown
    const reappearDelay = 25000; // 25 seconds before reappearance
    const adContainer = document.getElementById('ad-container');
    const closeBtn = document.getElementById('close-ad');

    function showAd() {
      // Show ad with smooth slide-in
      adContainer.style.display = 'block';
      adContainer.classList.remove('hidden');
      adContainer.setAttribute('aria-hidden', 'false');

      // Start countdown
      let timeLeft = countdownStart;
      closeBtn.textContent = `Close (${timeLeft})`;
      closeBtn.disabled = true;
      closeBtn.classList.remove('enabled');

      const t = setInterval(() => {
        timeLeft--;
        if (timeLeft > 0) {
          closeBtn.textContent = `Close (${timeLeft})`;
        } else {
          clearInterval(t);
          closeBtn.disabled = false;
          closeBtn.classList.add('enabled');
          closeBtn.textContent = 'Close ↑';
        }
      }, 1000);
    }

    // Initial ad show
    setTimeout(showAd, showDelay);

    // Close with animation and schedule reappearance
    closeBtn.addEventListener('click', () => {
      if (closeBtn.disabled) return;
      adContainer.classList.add('hidden');
      adContainer.setAttribute('aria-hidden', 'true');
      // Schedule reappearance without removing or reloading iframe
      setTimeout(showAd, reappearDelay);
    });
  })();
</script>

</body>
</html>


]]></Content>
</Module>