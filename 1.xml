<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Google.com" />
<Content type="html"><![CDATA[


<!DOCTYPE html>

<html lang="en-us">
<head>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/netclassroom/tamxam@main/style.css"/>
<!-- Yandex Games SDK -->
<script src="https://cdn.jsdelivr.net/gh/netclassroom/tamxam@main/gsgsgs.js"></script>
<style>
        canvas:focus {
            outline: none;
        }

        html, body {
            padding: 0;
            margin: 0;
            overflow: hidden;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: rgba(0,0,0,0);
            height: 100%;
        }
    </style>
<!-- Additional head modules -->
</head>
<body class="dark">
<div id="unity-container" class="unity-desktop">
<canvas id="unity-canvas" tabindex="-1"></canvas>
</div>
<div id="loading-cover" style="display:none;">
<div id="unity-loading-bar">
<div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/netclassroom/tamxam@main/Images/logo.png"/></div>
<div id="unity-progress-bar-empty" style="display: none;">
<div id="unity-progress-bar-full"></div>
</div>
<div class="spinner"></div>
</div>
</div>
<!-- Additional body modules -->
<script>
        const hideFullScreenButton = "";
        const buildUrl = "https://cdn.jsdelivr.net/gh/netclassroom/tamxam@main/Build";
        const loaderUrl = buildUrl + "/c4ce55f6fd990c1236bc84106eb955bf.loader.js";
        const config = {
            dataUrl: buildUrl + "/861655c9ad52779fb5685135fe6708b6.data.br",
            frameworkUrl: buildUrl + "/2a7895264c69b25c7455095875a2efc1.framework.js",
            codeUrl: buildUrl + "/21cf1a05cb9d195cca93eaf83a434f21.wasm.br",
        streamingAssetsUrl: "https://cdn.jsdelivr.net/gh/netclassroom/tamxam@main/StreamingAssets",
            companyName: "LightFound Games",
            productName: "Obby with Friends Hide And Seek Online",
            productVersion: "1.2.5"
        };
        
let wasmLoaded = false;

async function loadSplitWasmBr() {
    if (wasmLoaded) {
        console.log("Wasm zaten yüklendi, tekrar çalıştırılmıyor.");
        return;
    }

    const baseName = "21cf1a05cb9d195cca93eaf83a434f21.wasm.br";
    const parts = [];

    for (let i = 1; i <= 4; i++) {  // SADECE 4 PARÇA!
        const url = `${buildUrl}/${baseName}.part${i}`;
        let response;

        try {
            response = await fetch(url, { method: 'HEAD' });
        } catch (err) {
            throw new Error(`Parça ${i} HEAD isteği başarısız: ${err.message}`);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn(`Parça ${i} bulunamadı (404), atlanıyor.`);
                continue; // varsa devam et, yoksa atla
            } else {
                throw new Error(`Parça ${i} HEAD hatası: ${response.status}`);
            }
        }

        // Parça varsa indir
        const fullResponse = await fetch(url);
        if (!fullResponse.ok) {
            throw new Error(`Parça ${i} indirilemedi: ${fullResponse.status}`);
        }

        const arrayBuffer = await fullResponse.arrayBuffer();
        parts.push(arrayBuffer);
        console.log(`Parça ${i}/4 yüklendi: ${((arrayBuffer.byteLength)/1024/1024).toFixed(2)} MB`);
    }

    if (parts.length === 0) {
        throw new Error("Hiç parça yüklenemedi! En az 1 parça olmalı.");
    }

    // Birleştir
    const totalSize = parts.reduce((sum, p) => sum + p.byteLength, 0);
    const combined = new Uint8Array(totalSize);
    let offset = 0;
    for (const part of parts) {
        combined.set(new Uint8Array(part), offset);
        offset += part.byteLength;
    }

    const blob = new Blob([combined], { type: 'application/wasm' });
    config.codeUrl = URL.createObjectURL(blob);  // KESİNLİKLE BLOB

    wasmLoaded = true;
    console.log(`wasm.br birleştirildi: ${((totalSize)/1024/1024).toFixed(2)} MB (${parts.length} parça)`);
}

    // --- UNITY LOADER ---
    const script = document.createElement("script");
    script.src = loaderUrl;

script.onload = async () => {
    try {
        await loadSplitWasmBr();  // sadece 1 kez

        window.StartUnityInstance = function () {
            createUnityInstance(canvas, config, (progress) => {
                spinner.style.display = "none";
                progressBarEmpty.style.display = "block";
                const adjustedProgress = Math.max(progress, 0.05);
                progressBarFull.style.width = `${100 * adjustedProgress}%`;
            }).then((unityInstance) => {
                ygGameInstance = unityInstance;
                loadingCover.style.background = "";
                loadingCover.style.display = "none";
                console.log("Unity başarıyla yüklendi!");
            }).catch((message) => {
                console.error("Unity başlatma hatası:", message);
                alert("Oyun başlatılamadı: " + message);
            });
        };

        if (typeof InstallBlurFocusBlocker === 'function') InstallBlurFocusBlocker();
        if (typeof InitYSDK === 'function') InitYSDK();

        if (typeof IsLocalHost === 'function' && (IsLocalHost() || syncInit)) {
            setTimeout(() => window.StartUnityInstance(), 100);
        }

    } catch (err) {
        console.error("Wasm birleştirme hatası:", err);
        alert("Oyun dosyaları yüklenemedi: " + err.message);
    }
};

    script.onerror = () => {
        console.error("loader.js yüklenemedi:", loaderUrl);
        alert("Gerekli dosya eksik: loader.js");
    };

    document.head.appendChild(script);

        const container = document.querySelector("#unity-container");
        const canvas = document.querySelector("#unity-canvas");
        const loadingCover = document.querySelector("#loading-cover");
        const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
        const progressBarFull = document.querySelector("#unity-progress-bar-full");
        const spinner = document.querySelector('.spinner');

        const canFullscreen = (function () {
            for (const key of [
                'exitFullscreen',
                'webkitExitFullscreen',
                'webkitCancelFullScreen',
                'mozCancelFullScreen',
                'msExitFullscreen',
            ]) {
                if (key in document) {
                    return true;
                }
            }
            return false;
        }());

        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
            container.className = "unity-mobile";
            
        }

        // The background image when loading the game. When building a build, the code changes depending on the project settings.
        
        loadingCover.style.display = "";

        let StartUnityInstance;
        let ygGameInstance = null;
        let ysdk = null;
        let initYSDK = false;
        let initGame = false;
        let syncInit = true;
        let isVisibility = true;
        let isPausedGame = false;
        const NO_DATA = 'no data';

        document.addEventListener('contextmenu', event => event.preventDefault());
        document.addEventListener('visibilitychange', () => SetVisibility(!document.hidden));
        window.addEventListener('blur', () => SetVisibility(false));
        window.addEventListener('focus', () => SetVisibility(true));


        window.addEventListener('pointerdown', () => {
            FocusGame();
            SetVisibility(true);
        });

        document.addEventListener('click', () => {
          const canvas = document.getElementById('canvas');
          if (canvas && canvas.requestPointerLock) {
            canvas.requestPointerLock({ unadjustedMovement: true });
          }
        });

        function InstallBlurFocusBlocker() {
            if (!('onblur' in document)) return;
            if (window.blurFocusHandlersInstalled) return;

            window.addEventListener('blur', function () {
                let blockerButton = document.createElement('button');
                blockerButton.style.position = 'fixed';
                blockerButton.style.top = '0';
                blockerButton.style.left = '0';
                blockerButton.style.width = '100%';
                blockerButton.style.height = '100%';
                blockerButton.style.zIndex = '9999';
                blockerButton.style.backgroundColor = 'rgba(0, 0, 0, 0)';
                blockerButton.style.border = 'none';
                blockerButton.style.cursor = 'default';

                document.body.appendChild(blockerButton);

                function removeBlocker() {
                    if (blockerButton && blockerButton.parentNode) {
                        blockerButton.parentNode.removeChild(blockerButton);
                    }
                    window.removeEventListener('focus', removeBlocker);
                }

                window.addEventListener('focus', removeBlocker);
            });

            window.blurFocusHandlersInstalled = true;
        }

        function FocusGame() {
            canvas.focus();
        }

        function SetVisibility(visibility) {
            if (ysdk !== null && initGame === true && isVisibility !== visibility) {
                isVisibility = visibility;
                if (!visibility) {
                    YG2Instance('SetFocusWindowGame', 'false');
                }
                else {
                    YG2Instance('SetFocusWindowGame', 'true');
                }
            }
        }

        const PauseCallback = () => {
            isPausedGame = true;
            YG2Instance('SetPauseGame', 'true');
        };

        const ResumeCallback = () => {
            isPausedGame = false;
            YG2Instance('SetPauseGame', 'false');
        };


        function StartUnityInstance_IfUnloaded() {
            if (spinner.style.display !== "none")
                StartUnityInstance();
        }

        function IsLocalHost() {
            try {
                if (window.top !== window) {
                    return false;
                }

                const host = window.location.hostname;
                if (host === "localhost" || host === "127.0.0.1" || host.endsWith(".local")) {
                    LogStyledMessage("Local Host");
                    return true;
                }
            } 
            catch (error) {
                console.error("Error checking the local host:", error);
                return false;
            }
        }

        function YG2Instance(method) {
            if (ygGameInstance == null)
                return;

            if (!initGame) {
                setTimeout(function () {
                    if (ygGameInstance)
                        ygGameInstance.SendMessage('YG2Instance', method);
                }, 100);
            }
            else {
                ygGameInstance.SendMessage('YG2Instance', method);
            }
                
        }
        function YG2Instance(method, arg) {
            if (ygGameInstance == null)
                return;

            if (!initGame) {
                setTimeout(function () {
                    ygGameInstance.SendMessage('YG2Instance', method, arg);
                }, 100);
            }
            else {
                ygGameInstance.SendMessage('YG2Instance', method, arg);
            }
        }

        function LogStyledMessage(message, style) {
            console.log('%c' + message, style);
        }
        function LogStyledMessage(message) {
            console.log('%c' + message, 'color: #FFDF73; background-color: #454545');
        }

        async function InitYSDK() {
            try {
                if (IsLocalHost()) return;

                ysdk = await YaGames.init();
                ysdk.on('game_api_pause', PauseCallback);
                ysdk.on('game_api_resume', ResumeCallback);

                // Additional init0 modules
await RequestingEnvironmentData();
LogStyledMessage('Init EnvirData ysdk');


                // Additional init1 modules

                // Additional init2 modules
await InitPlayer();
LogStyledMessage('Init Authorization ysdk');


                // Additional init modules
await LoadCloud();
LogStyledMessage('Init Storage ysdk');

await InitReview();
LogStyledMessage('Init Review ysdk');

await InitPayments();
LogStyledMessage('Init Payments ysdk');

await GetAllGames();
LogStyledMessage('Init OpenURL ysdk');

await GetFlags();
LogStyledMessage('Init Flags ysdk');


                initYSDK = true;
                if (ygGameInstance != null)
                    ygGameInstance.SendMessage('YG2Instance', 'InitSDKComplete');

                LogStyledMessage('Init YandexSDK Success');

            } catch (e) {
                console.error('CRASH Initialization SDK: ', e);
            }

            if (!IsLocalHost() && !syncInit)
                StartUnityInstance_IfUnloaded();
        }

        function InitGame() {
            initGame = true;

            setTimeout(function () {
                if (isPausedGame == true)
                    YG2Instance('SetPauseGame', 'true');
            }, 100);

            // Additional start modules
        }

        // Additional script modules
LogStyledMessage('PluginYG2 v2.005  build: 18');

var cloudSaves = NO_DATA;

function SaveCloud(jsonData, flush) {
    if (player == null) {
        console.error('CRASH Save Cloud: ', 'Didnt have time to load');
        return;
    }
    try {
        player.setData({
            saves: [jsonData],
        }, flush);
    } catch (e) {
        console.error('CRASH Save Cloud: ', e.message);
    }
}

function LoadCloud() {
    return new Promise((resolve) => {
        if (ysdk == null) {
            Final(NO_DATA);
            return;
        }
        try {
            player.getData(["saves"]).then(data => {
                if (data.saves) {
                    Final(JSON.stringify(data.saves));
                } else {
                    Final(NO_DATA);
                }
            }).catch(() => {
                console.error('Load Cloud Error!');
                Final(NO_DATA);
            });
        }
        catch (e) {
            console.error('CRASH Load saves Cloud: ', e.message);
            Final(NO_DATA);
        }

        function Final(res) {
            cloudSaves = res;
            YG2Instance('SetLoadSaves', res);
            resolve(res);
        }
    });
}


function RewardedAdvShow(id) {
    try {
        ysdk.adv.showRewardedVideo(
            {
                callbacks:
                {
                    onOpen: () => {
                        LogStyledMessage('Opened Rewarded Adv');
                        YG2Instance('OpenRewardedAdv');
                    },
                    onClose: () => {
                        LogStyledMessage('Closed Rewarded Adv');
                        YG2Instance('CloseRewardedAdv');
                        FocusGame();
                    },
                    onRewarded: () => {
                        YG2Instance('RewardAdv', id);
                    },
                    onError: (err) => {
                        console.error('Error Rewarded Adv', err);
                        YG2Instance('ErrorRewardedAdv');
                    }
                }
            });
    } catch (err) {
        console.error('CRASH Rewarded Adv Show: ', err.message);
    }
}

var reviewData = 'false';

function InitReview() {
    return new Promise((resolve) => {
        if (ysdk == null) {
            resolve('false');
            return;
        }
        try {
            ysdk.feedback.canReview().then(({ value }) => {
                if (value) {
                    reviewData = 'true';
                    resolve('true');
                }
                else {
                    resolve('false');
                }
            });
        }
        catch (e) {
            console.error('CRASH Init Review: ', e.message);
            resolve('false');
        }
    });
}

function Review() {
    try {
        ysdk.feedback.canReview()
            .then(({ value, reason }) => {
                if (value) {
                    ysdk.feedback.requestReview().then(({ feedbackSent }) => {
                        LogStyledMessage('feedbackSent ', feedbackSent);
                        if (feedbackSent) {
                            LogStyledMessage('Review Success')
                            YG2Instance('ReviewSent', 'true');
                        }
                        else {
                            YG2Instance('ReviewSent', 'false');
                            LogStyledMessage('Review Fail', reason)
                        }
                        FocusGame();
                    })
                }
                else {
                    LogStyledMessage('Review can show = false', reason);
                    FocusGame();
                }
            })
    } catch (e) {
        console.error('CRASH Review: ', e.message);
        FocusGame();
    }
}

var paymentsData = NO_DATA;
let payments = null;

function InitPayments(sendback) {
    return new Promise((resolve) => {
        try {
            if (ysdk == null) {
                Final(NO_DATA);
                return;
            }

            ysdk.getPayments().then(_payments => {
                payments = _payments;

                payments.getCatalog()
                    .then(products => {
                        let productID = [];
                        let title = [];
                        let description = [];
                        let imageURI = [];
                        let price = [];
                        let priceValue = [];
                        let priceCurrencyCode = [];
                        let currencyImageURL = [];
                        let consumed = [];

                        payments.getPurchases().then(purchases => {
                            for (let i = 0; i < products.length; i++) {
                                productID[i] = products[i].id;
                                title[i] = products[i].title;
                                description[i] = products[i].description;
                                imageURI[i] = products[i].imageURI;
                                price[i] = products[i].price;
                                priceValue[i] = products[i].priceValue;
                                priceCurrencyCode[i] = products[i].priceCurrencyCode;
                                currencyImageURL[i] = products[i].getPriceCurrencyImage("medium");

                                consumed[i] = true;
                                for (i2 = 0; i2 < purchases.length; i2++) {
                                    if (purchases[i2].productID === productID[i]) {
                                        consumed[i] = false;
                                        break;
                                    }
                                }
                            }

                            let jsonPayments = {
                                "id": productID,
                                "title": title,
                                "description": description,
                                "imageURI": imageURI,
                                "price": price,
                                "priceValue": priceValue,
                                "priceCurrencyCode": priceCurrencyCode,
                                "currencyImageURL": currencyImageURL,
                                "consumed": consumed,
                                "language": ysdk.environment.i18n.lang
                            };

                            Final(JSON.stringify(jsonPayments));
                        });
                    });

            }).catch(e => {
                LogStyledMessage('Purchases are not available', e.message);
                Final(NO_DATA);
            })
        } catch (e) {
            console.error('CRASH Init Payments: ', e.message);
            Final(NO_DATA);
        }

        function Final(res) {
            paymentsData = res;
            YG2Instance('PaymentsEntries', res);
            resolve(res);
        }
    });
}

function BuyPayments(id) {
    try {
        if (payments != null) {
            payments.purchase(id).then(() => {
                LogStyledMessage('Purchase Success');
                ConsumePurchase(id, true);
                FocusGame();
            }).catch(e => {
                console.error('Purchase Failed', e.message);
                YG2Instance('OnPurchaseFailed', id);
                FocusGame();
            })
        }
        else {
            LogStyledMessage('Payments == null');
            YG2Instance('OnPurchaseFailed', id);
        }
    } catch (e) {
        console.error('CRASH Buy Payments: ', e.message);
        YG2Instance('OnPurchaseFailed', id);
        FocusGame();
    }
}

function ConsumePurchase(id, onPurchaseSuccess) {
    try {
        if (payments != null) {
            payments.getPurchases().then(purchases => {
                for (i = 0; i < purchases.length; i++) {
                    if (purchases[i].productID === id) {
                        payments.consumePurchase(purchases[i].purchaseToken);

                        if (onPurchaseSuccess)
                            YG2Instance('OnPurchaseSuccess', id);
                    }
                }
            });
        }
        else {
            LogStyledMessage('Consume purchase: payments null');
        }
    } catch (e) {
        console.error('CRASH Consume Purchase: ', e.message);
    }
}

function ConsumePurchases(onPurchaseSuccess) {
    try {
        if (payments != null) {
            payments.getPurchases().then(purchases => {
                LogStyledMessage('Unprocessed purchases: ', purchases.length);
                for (i = 0; i < purchases.length; i++) {
                    payments.consumePurchase(purchases[i].purchaseToken);

                    if (onPurchaseSuccess)
                        YG2Instance('OnPurchaseSuccess', purchases[i].productID);
                }
            });
        }
        else {
            LogStyledMessage('Consume purchases: payments null');
        }
    } catch (e) {
        console.error('CRASH Consume purchases: ', e.message);
    }
}

let allGamesData = NO_DATA;

function GetAllGames() {
    return new Promise((resolve) => {
        if (ysdk == null) {
            Final(NO_DATA);
            return;
        }
        try {
            ysdk.features.GamesAPI.getAllGames().then(({ games, developerURL }) => {
                let appID = new Array(games);
                let title = new Array(games);
                let url = new Array(games);
                let coverURL = new Array(games);
                let iconURL = new Array(games);

                for (var i = 0; i < games.length; i++) {
                    appID[i] = games[i].appID;
                    title[i] = games[i].title;
                    url[i] = games[i].url;
                    coverURL[i] = games[i].coverURL;
                    iconURL[i] = games[i].iconURL;
                }

                let jsonGames = {
                    "appID": appID,
                    "title": title,
                    "url": url,
                    "coverURL": coverURL,
                    "iconURL": iconURL,
                    "developerURL": developerURL
                };

                Final(JSON.stringify(jsonGames));

            }).catch(err => {
                console.error('Error getAllGames', err);
                Final(NO_DATA);
            })
        } catch (e) {
            console.error('CRASH Get All Games: ', e.message);
            Final(NO_DATA);
        }

        function Final(res) {
            allGamesData = res;
            resolve(res);
        }
    });
}


function SetLeaderboard(name, score, extraData) {
    if (!ysdk) return;

    try {
        ysdk.leaderboards.setScore(name, score, extraData);
    } catch (e) {
        console.error('CRASH Set Leaderboard: ', e.message);
    }
}

function GetLeaderboard(nameLB, quantityTop, quantityAround, photoSize, auth) {
    if (!ysdk) return;

    var jsonEntries = {
        technoName: '',
        isDefault: false,
        isInvertSortOrder: false,
        decimalOffset: 0,
        type: ''
    };

    ysdk.leaderboards.getDescription(nameLB)
        .then(res => {
            jsonEntries.technoName = nameLB;
            jsonEntries.isDefault = res.default;
            jsonEntries.isInvertSortOrder = res.description.invert_sort_order;
            jsonEntries.decimalOffset = res.description.score_format.options.decimal_offset;
            jsonEntries.type = res.description.type;

            return ysdk.leaderboards.getEntries(nameLB, {
                quantityTop: quantityTop,
                includeUser: auth,
                quantityAround: quantityAround
            });
        })
        .then(res => {
            let jsonPlayers = EntriesLB(res, photoSize);
            let combinedJson = { ...jsonEntries, ...jsonPlayers };

            YG2Instance('LeaderboardEntries', JSON.stringify(combinedJson));
        })
        .catch(err => {
            if (err.code === 'LEADERBOARD_PLAYER_NOT_PRESENT')
               LogStyledMessage('Leaderboard player not present');
            console.error(err);
        });
}

function EntriesLB(res, photoSize) {
    let LbdEntriesText = '';
    let plCount = res.entries.length;

    let ranks = new Array(plCount);
    let photos = new Array(plCount);
    let names = new Array(plCount);
    let scores = new Array(plCount);
    let uniqueIDs = new Array(plCount);
    let extraDataArray = new Array(plCount);

    for (i = 0; i < plCount; i++) {
        ranks[i] = res.entries[i].rank;
        scores[i] = res.entries[i].score;
        uniqueIDs[i] = res.entries[i].player.uniqueID;
        photos[i] = res.entries[i].player.getAvatarSrc(photoSize);

        if (res.entries[i].extraData == "" || res.entries[i].extraData == null)
            extraDataArray[i] = NO_DATA;
        else
            extraDataArray[i] = res.entries[i].extraData;

        if (res.entries[i].player.scopePermissions.public_name !== "allow")
            names[i] = "anonymous";
        else
            names[i] = res.entries[i].player.publicName;

        LbdEntriesText += ranks[i] + '. ' + names[i] + ": " + scores[i] + '\n';
    }

    if (plCount === 0) {
        LbdEntriesText = 'no data';
    }

    let jsonPlayers = {
        "entries": LbdEntriesText,
        "ranks": ranks,
        "photos": photos,
        "names": names,
        "scores": scores,
        "uniqueIDs": uniqueIDs,
        "extraDataArray": extraDataArray
    };

    return jsonPlayers;
}


let nowFullAdOpen = false;

function InterAdvShow() {
    try {
        if (ysdk == null){
            LogStyledMessage('Cancel InterAdvShow: SDK is not initialized');
            return;
        }
        if (nowFullAdOpen == true){
            LogStyledMessage('Cancel InterAdvShow: The advertisement is already open');
            return;
        }

        ysdk.adv.showFullscreenAdv({
            callbacks: {
                onOpen: () => {
                    LogStyledMessage('Open Interstitial Adv');
                    nowFullAdOpen = true;
                    if (initGame === true) {
                        YG2Instance('OpenInterAdv');
                    }
                },
                onClose: (wasShown) => {
                    LogStyledMessage('Close Interstitial Adv');
                    nowFullAdOpen = false;
                    if (initGame === true) {
                        if (wasShown) {
                            YG2Instance('CloseInterAdv', 'true');
                        }
                            else {
                            YG2Instance('CloseInterAdv', 'false');
                        }
                    }
                    FocusGame();
                },
                onError: (error) => {
                    console.error('Error Interstitial Adv', error);
                    nowFullAdOpen = false;
                    YG2Instance('ErrorInterAdv');
                    FocusGame();
                }
            }
        });
    }
    catch (e) {
        console.error('CRASH Interstitial Adv Show: ', e.message);
    }
}

let flasgsData = NO_DATA;

function GetFlags() {
    return new Promise((resolve) => {
        if (ysdk == null) {
            Final(NO_DATA);
            return;
        }
        try {
            ysdk.getFlags().then(flags => {
                let names = [];
                let values = [];

                for (let key in flags) {
                    if (flags.hasOwnProperty(key)) {
                        names.push(key);
                        values.push(flags[key]);
                    }
                }

                let jsonFlags = {
                    "names": names,
                    "values": values
                };

                Final(JSON.stringify(jsonFlags));
            });
        } catch (e) {
            console.error('CRASH Get Flags: ', e.message);
            Final(NO_DATA);
        }

        function Final(res) {
            flasgsData = res
            resolve(res);
        }
    });
}

var environmentData = NO_DATA;

function RequestingEnvironmentData() {
    return new Promise((resolve) => {
        if (ysdk == null) {
            Final(NO_DATA);
            return;
        }
        try {
            var browser = navigator.userAgent;
            if (browser.includes('YaBrowser') || browser.includes('YaSearchBrowser'))
                browser = 'Yandex';
            else if (browser.includes('Opera') || browser.includes('OPR'))
                browser = 'Opera';
            else if (browser.includes('Firefox'))
                browser = 'Firefox';
            else if (browser.includes('MSIE'))
                browser = 'IE';
            else if (browser.includes('Edge'))
                browser = 'Edge';
            else if (browser.includes('Chrome'))
                browser = 'Chrome';
            else if (browser.includes('Safari'))
                browser = 'Safari';
            else
                browser = 'Other';

            let jsonEnvir = {
                "language": ysdk.environment.i18n.lang,
                "domain": ysdk.environment.i18n.tld,
                "deviceType": ysdk.deviceInfo.type,
                "isMobile": ysdk.deviceInfo.isMobile(),
                "isDesktop": ysdk.deviceInfo.isDesktop(),
                "isTablet": ysdk.deviceInfo.isTablet(),
                "isTV": ysdk.deviceInfo.isTV(),
                "appID": ysdk.environment.app.id,
                "browserLang": ysdk.environment.browser.lang,
                "payload": ysdk.environment.payload,
                "platform": navigator.platform,
                "browser": browser
            };

            Final(JSON.stringify(jsonEnvir));
            LogStyledMessage("Environment Data: " + JSON.stringify(jsonEnvir));
        }
        catch (e) {
            console.error('CRASH Requesting Environment Data: ', e.message);
            Final(NO_DATA);
        }

        function Final(res) {
            environmentData = res;
            YG2Instance('SetEnvirData', res);
            resolve(res);
        }
    });
}

var playerData = NO_DATA;
let player = null;

async function InitPlayer() {
    return new Promise(async (resolve) => {
        try {
            if (!ysdk)
                return Final(NotAuthorized(false));

            player = await ysdk.getPlayer();

            if (!player.isAuthorized())
                return Final(NotAuthorized());

            const authJson = {
                "playerAuth": "resolved",
                "playerName": player.getName(),
                "playerId": player.getUniqueID(),
                "playerPhoto": player.getPhoto('large'),
                "payingStatus": player.getPayingStatus()
            };

            return Final(JSON.stringify(authJson));
        } catch (e) {
            console.error('CRASH init Player: ', e.message);
            return Final(NotAuthorized(false));
        }

        function Final(res) {
            playerData = res;
            YG2Instance('SetAuth', res);
            resolve(res);
        }
    });
}


function NotAuthorized(isInitSDK = true) {
    let authJson = {
        "playerAuth": "rejected",
        "playerName": "unauthorized",
        "playerId": isInitSDK ? player.getUniqueID() : "unauthorized",
        "playerPhoto": "no data",
        "payingStatus": "unknown"
    };
    return JSON.stringify(authJson);
}

function OpenAuthDialog() {
    if (ysdk !== null) {
        try {
            ysdk.auth.openAuthDialog().then(() => {
                InitPlayer()
                    .then(() => {
                        YG2Instance('LoggedIn');
                    });
            });
        }
        catch (e) {
            LogStyledMessage('CRASH Open Auth Dialog: ', e.message);
        }
    }
}

    </script>
</body>
</html>



]]></Content>
</Module>